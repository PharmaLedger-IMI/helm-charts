{{ template "chart.header" . }}

{{ template "chart.versionBadge" . }}{{ template "chart.typeBadge" . }}{{ template "chart.appVersionBadge" . }}

{{ template "chart.description" . }}

## Requirements

- [helm 3](https://helm.sh/docs/intro/install/)

## Changelog

See [Changelog](./CHANGELOG.md) for significant changes!

## Features

- Security by default:
  - SecurityContext
  - Non-root user
  - readonly filesystem
- Option to create VolumeSnapshots on *helm upgrade* or before deletion of the helm release. See [here](./docs/volumesnapshots/README.md) for details.
- Option to mount sensitive/secret via *CSI Secrets Driver* from a vault solution like AWS Secrets Manager, Azure Key Vault, GCP Secrets Manager or HashiCorp Vault instead of using *Kubernetes Secret*. See [here](./docs/secret_provider_class/README.md) for details.
- Option to provide `extraResources` like
  - [Network Policies](./docs/network_policies/README.md) for fine-grained control of network traffic
  - [Scheduled VolumeSnapshots](./docs/scheduled_volumesnapshots/README.md) for creating regular data backups

## Usage and samples

- [Here](./README.md#values) is a full list of all configuration values.
- The [values.yaml file](./values.yaml) shows the raw view of all configuration values.
- [**FULL SAMPLE**](./docs/full_sample/README.md) with multiple features combined.
- [Auto-Create Volumesnapshots](./docs/volumesnapshots/README.md) on helm upgrade and before deletion of the helm release.
- [Mount Secrets from Vault Solution via Secrets Store CSI Driver](./docs/secret_provider_class/README.md)
- [Network Policies](./docs/network_policies/README.md)
- [AWS Load Balancer Controller: Expose Service via Network Load Balancer](./docs/aws_lb_controller_service_nlb/README.md)

## Installing the Chart

These four installation samples demonstrate

1. the different use case combinations
2. how to pass the configuration settings provided by the plugin which is located [here](https://github.com/PharmaLedger-IMI/helm-pl-plugin.git).

**Note:** In case you are using the plugin mechanism, read the details about operating the plugin which can be found in the specific use case documentation.

### Option 1: Join Network followed by updating the PartnerInfo

The **most common option** is to [join an existing network](../../usecases/join-network/readme.md) and to [update the PartnerInfo](../../usecases/update-partners-info/readme.md) - which proposes PartnerNodes to Validators.

Also see **[Full Sample](./docs/full_sample/README.md)**.

```yaml
use_case:
  newNetwork:
    enabled: false
use_case:
  joinNetwork:
    enabled: true
use_case:
  updatePartnersInfo:
    enabled: true
```

```shell
helm upgrade --install quorum-node-0 pharmaledger-imi/quorum-node --version={{ template "chart.version" . }} \
  --values ./my-values.yaml \
  --set-file use_case.joinNetwork.plugin_data_common=./join-network.plugin.json \
  --set-file use_case.joinNetwork.plugin_data_secrets=./join-network.plugin.secrets.json \
  --set-file use_case.updatePartnersInfo.plugin_data_common=./update-partners-info.plugin.json

```

### Option 2: Only Join Network w/o updating PartnerInfos

You can also simply [join an existing network](../../usecases/join-network/readme.md) and do **not** [update the PartnerInfo](../../usecases/update-partners-info/readme.md).

```yaml
use_case:
  newNetwork:
    enabled: false
use_case:
  joinNetwork:
    enabled: true
use_case:
  updatePartnersInfo:
    enabled: false
```

```shell
helm upgrade --install quorum-node-0 pharmaledger-imi/quorum-node --version={{ template "chart.version" . }} \
  --values ./my-values.yaml \
  --set-file use_case.joinNetwork.plugin_data_common=./join-network.plugin.json \
  --set-file use_case.joinNetwork.plugin_data_secrets=./join-network.plugin.secrets.json

```

### Option 3: New Network followed by updating the PartnerInfo

Create a [New network](../../usecases/new-network/readme.md) and [update the PartnerInfo](../../usecases/update-partners-info/readme.md) - which proposes PartnerNodes to Validators.

```yaml
use_case:
  newNetwork:
    enabled: true
use_case:
  joinNetwork:
    enabled: false
use_case:
  updatePartnersInfo:
    enabled: true
```

```shell
helm upgrade --install quorum-node-0 pharmaledger-imi/quorum-node --version={{ template "chart.version" . }} \
  --values ./my-values.yaml \
  --set-file use_case.newNetwork.plugin_data_common=./new-network.plugin.json \
  --set-file use_case.newNetwork.plugin_data_secrets=./new-network.plugin.secrets.json \
  --set-file use_case.updatePartnersInfo.plugin_data_common=./update-partners-info.plugin.json

```

### Option 4: New Network

Simply create a [New network](../../usecases/new-network/readme.md)

```yaml
use_case:
  newNetwork:
    enabled: true
use_case:
  joinNetwork:
    enabled: false
use_case:
  updatePartnersInfo:
    enabled: false
```

```shell
helm upgrade --install quorum-node-0 pharmaledger-imi/quorum-node --version={{ template "chart.version" . }} \
  --values ./my-values.yaml \
  --set-file use_case.newNetwork.plugin_data_common=./new-network.plugin.json \
  --set-file use_case.newNetwork.plugin_data_secrets=./new-network.plugin.secrets.json

```

## Monitoring

Prometheus is being used to scrape the metrics from the pods metrics endpoint and to store them in a timeseries database.
Grafana is being used for visualization of the metrics. Grafana and Prometheus can also be used for alerting.
On Kubernetes, it is easy to install both components via helm charts.

- [Prometheus Helm Chart](https://github.com/prometheus-community/helm-charts/blob/main/charts/prometheus/README.md)
- [Grafana Helm Chart](https://github.com/grafana/helm-charts/blob/main/charts/grafana/README.md)

For details, take a look at [Kubernetes monitoring with Prometheus, the ultimate guide](https://sysdig.com/blog/kubernetes-monitoring-prometheus/).

### GoQuorum Metrics

The Quorum node provides several metrics by default in [Prometheus Metrics Format](https://github.com/prometheus/docs/blob/main/content/docs/instrumenting/exposition_formats.md). These metrics can be queried at Port `9545` at path `/debug/metrics/prometheus`. The pod configuration itself provides [appropriate annotations](https://www.weave.works/docs/cloud/latest/tasks/monitor/configuration-k8s/#per-pod-prometheus-annotations) for Prometheus to scrape these metrics. You can configure the metrics behaviour via the configuration section `quorum.metrics`.

In Grafana, install the [GoQuorum Overview Community Dashboard](https://grafana.com/grafana/dashboards/14360) to monitor Quorum Node metrics like *number of peers*.

### Peers

Also, you may want to have an overview of peer node connections from and to your node.
There are no metrics by default, thus a workaround is needed.

At AWS, you can query the VPC flow logs to retrieve the required information:

1. Activate VPC Flow logs to Cloudwatch
2. Provide IAM Role for Grafanas Kubernetes Service Account that allows Grafana to query Cloudmatch logs and configure Grafana (via helm chart) accordingly. See [here](https://grafana.com/docs/grafana/latest/datasources/aws-cloudwatch/) for the required permissions.
3. In Grafana install the [AWS CloudWatch data source](https://grafana.com/docs/grafana/latest/datasources/aws-cloudwatch/).

### Links

- [Kubernetes monitoring with Prometheus, the ultimate guide](https://sysdig.com/blog/kubernetes-monitoring-prometheus/)
- [How to monitor the Geth (Quorum) node in under 5 minutes](https://www.netdata.cloud/blog/how-to-monitor-the-geth-node-in-under-5-minutes/)
- [Geth Inferface Metrics](https://geth.ethereum.org/docs/interface/metrics)

## Additional helm options

Run `helm upgrade --helm` for full list of options.

1. Install to other namespace

    You can install into other namespace than `default` by setting the `--namespace` parameter, e.g.

    ```bash
    helm upgrade my-release-name pharmaledger-imi/quorum-node --version={{ template "chart.version" . }} \
      --install \
      --namespace=my-namespace \
      --values my-values.yaml \
    ```

2. Wait until installation has finished successfully and the deployment is up and running.

    Provide the `--wait` argument and time to wait (default is 5 minutes) via `--timeout`

    ```bash
    helm upgrade my-release-name pharmaledger-imi/quorum-node --version={{ template "chart.version" . }} \
      --install \
      --wait --timeout=600s \
      --values my-values.yaml \
    ```

## Uninstalling the Helm Release

To uninstall/delete the `quorum-node-0` release:

```bash
helm delete quorum-node-0 \
  --namespace=my-namespace

```

{{ template "chart.maintainersSection" . }}

{{ template "chart.requirementsSection" . }}

{{ template "chart.valuesHeader" . }}

*Note:* Please scroll horizontally to show more columns (e.g. description)!

{{ template "chart.valuesTable" . }}

{{ template "helm-docs.versionFooter" . }}
