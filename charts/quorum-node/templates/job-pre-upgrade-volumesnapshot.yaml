{{- /*

Description: This Job creates a VolumeSnapshot for data and/or log PVC and optionally waits for them are ready to use.
Hook-Weight: -50

*/}}
{{- if or .Values.persistence.data.volumeSnapshots.preUpgradeEnabled (and .Values.persistence.logs.enabled .Values.persistence.logs.volumeSnapshots.preUpgradeEnabled) -}}

{{- /*
1. Role, RoleBinding and ServiceAccount
*/}}
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: {{ include "quorumNode.fullname" . }}-volumesnapshot
  namespace: {{ default .Release.Namespace }}
  annotations:
    "helm.sh/hook": pre-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded,hook-failed
    "helm.sh/hook-weight": "-50"
rules:
  # Create and get Snapshots
  - apiGroups: ["snapshot.storage.k8s.io"]
    resources: ["volumesnapshots"]
    verbs: ["create", "get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: {{ include "quorumNode.fullname" . }}-volumesnapshot
  namespace: {{ default .Release.Namespace }}
  annotations:
    "helm.sh/hook": pre-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded,hook-failed
    "helm.sh/hook-weight": "-50"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: {{ include "quorumNode.fullname" . }}-volumesnapshot
subjects:
- kind: ServiceAccount
  name: {{ include "quorumNode.fullname" . }}-volumesnapshot
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ include "quorumNode.fullname" . }}-volumesnapshot
  namespace: {{ default .Release.Namespace }}
  labels:
    name: {{ include "quorumNode.fullname" . }}-volumesnapshot
  annotations:
    "helm.sh/hook": pre-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded,hook-failed
    "helm.sh/hook-weight": "-50"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "quorumNode.fullname" . }}-volumesnapshot
  namespace: {{ default .Release.Namespace }}
  annotations:
    "helm.sh/hook": pre-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded,hook-failed
    "helm.sh/hook-weight": "-50"
data:
  {{- if .Values.persistence.data.volumeSnapshots.preUpgradeEnabled}}
  volumesnapshot-data.tpl: |-
    apiVersion: snapshot.storage.k8s.io/{{ .Values.persistence.data.volumeSnapshots.apiVersion }}
    kind: VolumeSnapshot
    metadata:
      name: REPLACE_VOLUME_SNAPSHOT_NAME
      namespace: {{ default .Release.Namespace }}
    spec:
      source:
        persistentVolumeClaimName: {{ include "quorumnode.PvcData" . }}
      volumeSnapshotClassName: {{ .Values.persistence.data.volumeSnapshots.className }}
  {{- end }}

  {{- if and .Values.persistence.logs.enabled .Values.persistence.logs.volumeSnapshots.preUpgradeEnabled}}
  volumesnapshot-logs.tpl: |-
    apiVersion: snapshot.storage.k8s.io/{{ .Values.persistence.logs.volumeSnapshots.apiVersion }}
    kind: VolumeSnapshot
    metadata:
      name: REPLACE_VOLUME_SNAPSHOT_NAME
      namespace: {{ default .Release.Namespace }}
    spec:
      source:
        persistentVolumeClaimName: {{ include "quorumnode.PvcLogs" . }}
      volumeSnapshotClassName: {{ .Values.persistence.logs.volumeSnapshots.className }}
  {{- end }}

---
{{- /*
2. This Job creates the VolumeSnapshot and optionally waits until ready to use
*/}}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "quorumNode.fullname" . }}-volumesnapshot
  namespace: {{ default .Release.Namespace }}
  annotations:
    "helm.sh/hook": pre-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
    "helm.sh/hook-weight": "-50"
    "checkov.io/skip1": CKV_K8S_38=ServiceAccountToken needs to be mounted in order for kubectl to communicate to K8S API
spec:
  backoffLimit: 0
  {{- if .Values.kubectl.ttlSecondsAfterFinished }}
  ttlSecondsAfterFinished: {{ .Values.kubectl.ttlSecondsAfterFinished }}
  {{- end }}
  template:
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "quorumNode.fullname" . }}-volumesnapshot
      automountServiceAccountToken: true
      {{- with .Values.kubectl.podSecurityContext }}
      securityContext:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      restartPolicy: Never
      containers:
      - name: main
        {{- with .Values.kubectl.securityContext }}
        securityContext:
          {{- toYaml . | nindent 10 }}
        {{- end }}
        {{- with .Values.kubectl.resources }}
        resources:
          {{- toYaml . | nindent 10 }}
        {{- end }}
        image: {{ include "quorumNode.kubectl.image" . | quote }}
        imagePullPolicy: {{ .Values.kubectl.image.pullPolicy | default "Always" }}
        command:
          - sh
          - -c
        args:
          - |
            # Exit on error
            set -e

            # create timestamp in UTC
            now=$(date -u "+%Y%m%d%H%M")

            {{- if .Values.persistence.data.volumeSnapshots.preUpgradeEnabled}}
            volumeSnapshotData="{{- printf "%s-upgrade-to-revision-%s" (include "quorumnode.PvcData" .) (toString .Release.Revision) }}-${now}"
            # Replace placeholder and write to temp location which is writeable
            sed "s/REPLACE_VOLUME_SNAPSHOT_NAME/${volumeSnapshotData}/g" "/configmap/volumesnapshot-data.tpl" > "/temp/volumesnapshot-data.yaml"

            echo "1a. Creating VolumeSnapshot $volumeSnapshotData"
            kubectl apply -f /temp/volumesnapshot-data.yaml
            rc=$?
            echo "   rc=$rc"
            {{- end }}

            {{- if and .Values.persistence.logs.enabled .Values.persistence.logs.volumeSnapshots.preUpgradeEnabled}}
            volumeSnapshotLogs="{{- printf "%s-upgrade-to-revision-%s" (include "quorumnode.PvcLogs" .) (toString .Release.Revision) }}-${now}"
            # Replace placeholder and write to temp location which is writeable
            sed "s/REPLACE_VOLUME_SNAPSHOT_NAME/${volumeSnapshotLogs}/g" "/configmap/volumesnapshot-logs.tpl" > "/temp/volumesnapshot-logs.yaml"

            echo "1b. Creating VolumeSnapshot $volumeSnapshotLogs"
            kubectl apply -f /temp/volumesnapshot-logs.yaml
            rc=$?
            echo "   rc=$rc"
            {{- end }}
            
            {{- if .Values.persistence.data.volumeSnapshots.preUpgradeEnabled }}
            {{- if eq (toString .Values.persistence.data.volumeSnapshots.waitForReadyToUse) "true" }}
            if [ $rc -eq 0 ]
            then
              echo "2a. Waiting for VolumeSnapshot $volumeSnapshotData is ready to use"
              readyToUse=$(kubectl get volumesnapshot $volumeSnapshotData -o='jsonpath={.status.readyToUse}')
              while [ "$readyToUse" != "true" ]
              do
                  echo "readyToUse=$readyToUse"
                  sleep 1s
                  readyToUse=$(kubectl get volumesnapshot $volumeSnapshotData -o='jsonpath={.status.readyToUse}')
              done
              echo "readyToUse=$readyToUse"
            fi
            {{- end }}
            {{- end }}

            {{- if and .Values.persistence.logs.enabled .Values.persistence.logs.volumeSnapshots.preUpgradeEnabled}}
            {{- if eq (toString .Values.persistence.logs.volumeSnapshots.waitForReadyToUse) "true" }}
            if [ $rc -eq 0 ]
            then
              echo "2b. Waiting for VolumeSnapshot $volumeSnapshotLogs is ready to use"
              readyToUse=$(kubectl get volumesnapshot $volumeSnapshotLogs -o='jsonpath={.status.readyToUse}')
              while [ "$readyToUse" != "true" ]
              do
                  echo "readyToUse=$readyToUse"
                  sleep 1s
                  readyToUse=$(kubectl get volumesnapshot $volumeSnapshotLogs -o='jsonpath={.status.readyToUse}')
              done
              echo "readyToUse=$readyToUse"
            fi
            {{- end }}
            {{- end }}

            echo "3. Exiting ..."
            exit $rc
        volumeMounts:
          {{- if .Values.persistence.data.volumeSnapshots.preUpgradeEnabled}}
          - name: configmap
            mountPath: /configmap/volumesnapshot-data.tpl
            subPath: volumesnapshot-data.tpl
            readOnly: true
          {{- end }}
          {{- if and .Values.persistence.logs.enabled .Values.persistence.logs.volumeSnapshots.preUpgradeEnabled}}
          - name: configmap
            mountPath: /configmap/volumesnapshot-logs.tpl
            subPath: volumesnapshot-logs.tpl
            readOnly: true
          {{- end }}
          - name: temp
            mountPath: /temp
      volumes:
        - name: configmap
          configMap:
            name: {{ include "quorumNode.fullname" . }}-volumesnapshot
        - name: temp
          emptyDir:
            sizeLimit: "1Mi"
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}

{{- end -}}