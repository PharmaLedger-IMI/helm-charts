{{- $enode := "" }}
{{- $nodeAddress := ""}}
{{- if .Values.use_case.newNetwork.enabled }}
{{- $generatedPublicJson := ( .Values.use_case.newNetwork.plugin_data_common | fromJson ) }}
{{- $enode = $generatedPublicJson.enode }}
{{- $nodeAddress = $generatedPublicJson.nodeAddress }}
{{- else }}
{{- $generatedPublicJson := ( .Values.use_case.joinNetwork.plugin_data_common | fromJson ) }}
{{- $enode = $generatedPublicJson.enode }}
{{- $nodeAddress = $generatedPublicJson.nodeAddress }}
{{- end }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "quorumnode.PermissionedCfg" . }}
  namespace: {{ default .Release.Namespace }}
  labels:
    name: {{ include "quorumnode.PermissionedCfg" . }}
data:
  permissioned-nodes.json: |

    [
                  "enode://{{ $enode }}@{{ include "quorumNode.fullname" . }}:30303?discport=0"
    {{- if .Values.use_case.updatePartnersInfo.enabled }}
    {{- $generatedUpdatePartnersPublicJson := ( .Values.use_case.updatePartnersInfo.plugin_data_common | fromJson ) }}
    {{- $peers := $generatedUpdatePartnersPublicJson.peers }}
    {{- range $peers }}
    {{- $peer := . }}
    {{- printf "," }}
    {{- printf "enode://%s@%s:%s?discport=0" $peer.enode $peer.enodeAddress $peer.enodeAddressPort | quote | nindent 18 }}
    {{- end }}
    {{- end }}
    ]


---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "quorumnode.NodeManagement" . }}
  namespace: {{ default .Release.Namespace }}
  labels:
    name: {{ include "quorumnode.NodeManagement" . }}
data:
  ibft_propose.sh: |-
    #/bin/ash

    if [ $# -lt 1 ]; then
      echo " An address to vote in, or out, must be provided: "
      echo " ./propose_ibft.sh HEX_ADDRESS (true|false)"
    fi

    ADDRESS=$1
    VOTE_BOOL=true

    if [ $# -eq 2 ]; then
     VOTE_BOOL=$2
    fi
    RES=$(geth --exec "istanbul.propose(\"$1\", $VOTE_BOOL)" attach ipc:$QUORUM_HOME/dd/geth.ipc)
    echo $RES
  ibft_propose_all.sh: |-
    #!/bin/ash
    #set -xe

    for Addr in $( awk '/validators/,0' $QHOME/istanbul-validator-config.toml/istanbul-validator-config.toml | grep "0x" | sed 's/,//g; s/"//g' ); do
      echo $Addr
      $QHOME/node-management/ibft_propose.sh $Addr true
    done
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "quorumnode.IValidatorCfg" . }}.toml
  namespace: {{ default .Release.Namespace }}
  labels:
    name: {{ include "quorumnode.IValidatorCfg" . }}
data:
  istanbul-validator-config.toml: |-
    vanity = "0x00"
    validators = [
            {{ $nodeAddress | quote }}
    {{- if .Values.use_case.updatePartnersInfo.enabled }}
    {{- $generatedUpdatePartnersPublicJson := ( .Values.use_case.updatePartnersInfo.plugin_data_common | fromJson ) }}
    {{- $peers := $generatedUpdatePartnersPublicJson.peers }}
    {{- range $peers }}
    {{- $peer := . }}
    {{- printf "," }}
    {{- printf "%s" $peer.nodeAddress | quote | nindent 12 }}
    {{- end }}
    {{- end }}

    ]

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "quorumnode.gethHelpers" . }}
  namespace: {{ default .Release.Namespace }}
  labels:
    name: {{ include "quorumnode.gethHelpers" . }}
data:
  geth-attach.sh: |-
    #!/bin/sh

    # helper for connecting to geth from
    # outside the container
    # kubectl exec -it $POD -c quorum -- /geth-helpers/geth-attach.sh
    echo "connecting to geth $QHOME"
    geth attach --datadir $QUORUM_DATA_DIR $QUORUM_DATA_DIR/geth.ipc
  geth-exec.sh: |-
    #!/bin/sh

    # helper for connecting to geth from
    # outside the container
    # kubectl exec -it $POD -c quorum -- /geth-helpers/geth-exec.sh "admin.peers.length"

    GETH_CMD="eth.blockNumber"
    if [ "$#" -gt 0 ]; then
      GETH_CMD=$1
    fi
    # see: https://github.com/ethereum/go-ethereum/pull/17281
    # https://github.com/ethereum/go-ethereum/issues/16905
    # to avoid warning being returned
    # "WARN [02-20|00:21:04.382] Sanitizing cache to Go's GC limits  provided=1024 updated=663"
    geth --exec $GETH_CMD  --cache=16 attach --datadir $QUORUM_DATA_DIR $QUORUM_DATA_DIR/geth.ipc
