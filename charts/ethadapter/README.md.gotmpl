{{ template "chart.header" . }}

{{ template "chart.versionBadge" . }}{{ template "chart.typeBadge" . }}{{ template "chart.appVersionBadge" . }}

{{ template "chart.description" . }}

## Requirements

- [helm 3](https://helm.sh/docs/intro/install/)

## Changelog

See [Changelog](./CHANGELOG.md) for significant changes!

## Features

- Security by default:
  - SecurityContext
  - Non-root user
  - readonly filesystem
- Option to mount sensitive/secret via *CSI Secrets Driver* from a vault solution like AWS Secrets Manager, Azure Key Vault, GCP Secrets Manager or HashiCorp Vault instead of using *Kubernetes Secret*. See [here](./docs/secret_provider_class/README.md) for details.
- Option to provide `extraResources` like Network Policies. See [here](./docs/network_policies/README.md) for details.

## Usage and samples

- [Here](./README.md#values) is a full list of all configuration values.
- The [values.yaml file](./values.yaml) shows the raw view of all configuration values.
- [**FULL SAMPLE**](./docs/full_sample/README.md) with multiple features combined.
- [Mount Secrets from Vault Solution via Secrets Store CSI Driver](./docs/secret_provider_class/README.md)
- [Network Policies](./docs/network_policies/README.md)
- [Expose Service via Load Balancer](./docs/load_balancer/README.md)
- [AWS Load Balancer Controller: Expose Service via Ingress](./docs/aws_lb_controller_ingress/README.md)

## How it works

This helm chart creates a ConfigMap and Secret (or mount orgAccountJson via CSI Secrets Driver if `secretProviderClass.enabled: true`) with required configuration values.

- The ConfigMap is being used to store a) address of Quorum Node, b) address of Smart Contract anchoring and c) Abi of the SmartContract.
- The Secret (if `secretProviderClass.enabled: false`) contains the ETH Account and its private key. Autoconfiguration: In case you do not explictly provide `config.smartContractInfo` helm will try to read this value from a pre-existing ConfigMap (provided by helm chart *smartcontract*) in context of the user executing helm.
- If you want to store the secret data outside Kubernetes (`secretProviderClass.enabled: true`) and mount it as file, see sample for *CSI Secrets Driver* below.

**By default, this helm chart installs the Ethereum Adapter Service at an internal ClusterIP Service listening at port 3000.
This is to prevent exposing the service to the internet by accident!**

![How it works](./docs/ethadapter.drawio.png)

## Installing the Chart

**Note:** It is recommended to put non-sensitive configuration values in an configuration file (e.g. `my-values.yaml`) and pass sensitive/secret values via commandline (`--set-string`).

### Non-Sandbox installation

Configuration for a connected environment. You will need at least these configuration values:

- The URL of the Quorum RPC endpoint, e.g. `"http://quorum-validator1.quorum:8545"` - value of `config.rpcAddress`
- The SmartContract address, e.g. `"0x1234567890abcdef1234567890abcdef01234567"` - value of key *address* in `config.smartContractInfo`
- The sensitive *OrgAccountJson*, which consists of an address and private key. It is recommended to pass these values via commandline `--set-string` - value `secrets.orgAccountJson` or `secrets.orgAccountJsonBase64`.

    In case you do not want to pass *OrgAccountJson* to the helm chart and store it in a Kubernetes Secret but use a Vault solution like AWS Secrets Manager or Azure Key Vault, take a look [here](./docs/secret_provider_class/README.md).

1. Create configuration file, e.g. *my-values.yaml*

    ```yaml
    config:
      # -- URL of the Quorum node RPC endpoint, e.g. "http://quorum-validator1.quorum:8545"
      rpcAddress: "rpcAddress_value"

      # Note: 
      # 1. Replace 'address' value with the real address of the SmartContract.
      # 2. Use the below value of 'abi' as this is the already the real Abi of the SmartContract.
      smartContractInfo: |-
        {
          "address": "0x1234567890abcdef1234567890abcdef01234567",
          "abi": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"str\",\"type\":\"bool\"}],\"name\":\"BoolResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes1\",\"name\":\"str\",\"type\":\"bytes1\"}],\"name\":\"Bytes1Result\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"str\",\"type\":\"bytes32\"}],\"name\":\"Bytes32Result\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"statusCode\",\"type\":\"uint256\"}],\"name\":\"InvokeStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"str\",\"type\":\"bytes\"}],\"name\":\"Result\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string[2]\",\"name\":\"str\",\"type\":\"string[2]\"}],\"name\":\"StringArray2Result\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"str\",\"type\":\"string[]\"}],\"name\":\"StringArrayResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"StringResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"str\",\"type\":\"uint256\"}],\"name\":\"UIntResult\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"anchorId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"newAnchorValue\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"}],\"name\":\"createAnchor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"anchorId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"newAnchorValue\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"}],\"name\":\"appendAnchor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"anchorId\",\"type\":\"string\"}],\"name\":\"getAllVersions\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"constant\":true},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"anchorId\",\"type\":\"string\"}],\"name\":\"getLastVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"constant\":true},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"anchors\",\"type\":\"string[]\"}],\"name\":\"createOrUpdateMultipleAnchors\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSize\",\"type\":\"uint256\"}],\"name\":\"dumpAnchors\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"anchorId\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"anchorValues\",\"type\":\"string[]\"}],\"internalType\":\"struct Anchoring.Anchor[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalNumberOfAnchors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"}],\"name\":\"recover\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"
        }
    ```

2. Install via helm by passing sensitive *Org Account JSON* value in JSON format as escaped string

    Either pass sensitive *Org Account JSON* (`secrets.orgAccountJson`) in JSON format as escaped string:

    ```bash
    helm upgrade --install ethadapter pharmaledger-imi/ethadapter --version={{ template "chart.version" . }} \
        --values my-values.yaml \
        --set-string secrets.orgAccountJson="\{ \"address\": \"0xabcdef1234567890\" \, \"privateKey\": \"0x1234567890abcdef\" \}"

    ```

    or pass the value in JSON format as base64 encoded string (`secrets.orgAccountJsonBase64`):

    ```bash
    helm upgrade --install ethadapter pharmaledger-imi/ethadapter --version={{ template "chart.version" . }} \
        --values my-values.yaml \
        --set-string secrets.orgAccountJsonBase64="eyAia2V5IjogInZhbHVlIiB9"

    ```

### Sandbox installation

On a sandbox installation, you do not need to configure `config.smartContractInfo` as the *ethadapter* helm chart reads the SmartContractInfo from a pre-existing ConfigMap created by helm chart *smartcontract*. This approach is referred to as *Autoconfiguration*. **Note**: *smartcontract* and *ethadapter* must be installed to the same namespace.

Either create a config file `my-values.yaml` with this static *orgAccountJson* value which is used for all standalone quorum installations

```yaml
secrets:
  orgAccountJson: |-
    {"address": "0xb5ced4530d6ccbb31b2b542fd9b4558b52296784", "privateKey": "0x6b93a268f68239d321981125ecf24488920c6b3d900043d56fef66adb776abd5"}
```

and install

```bash
helm upgrade --install ethadapter pharmaledger-imi/ethadapter --version={{ template "chart.version" . }} \
    --values my-values.yaml
```

or pass `secrets.orgAccountJson` as escaped string on the commandline:

```bash
helm upgrade --install ethadapter pharmaledger-imi/ethadapter --version={{ template "chart.version" . }} \
  --set secrets.orgAccountJson="\{\"address\": \"0xb5ced4530d6ccbb31b2b542fd9b4558b52296784\"\, \"privateKey\": \"0x6b93a268f68239d321981125ecf24488920c6b3d900043d56fef66adb776abd5\"\}"
```

## Additional helm options

Run `helm upgrade --helm` for full list of options.

### Install to other namespace

You can install into other namespace than `default` by setting the `--namespace` parameter, e.g.

```bash
helm upgrade --install ethadapter pharmaledger-imi/ethadapter --version={{ template "chart.version" . }} \
  --namespace=my-namespace \
  --values my-values.yaml
```

### Wait until installation has finished successfully and the deployment is up and running

Provide the `--wait` argument and time to wait (default is 5 minutes) via `--timeout`

```bash
helm upgrade --install ethadapter pharmaledger-imi/ethadapter --version={{ template "chart.version" . }} \
  --wait --timeout=600s \
  --values my-values.yaml
```

## Uninstalling the Helm Release

To uninstall/delete the `ethadapter` relase:

```bash
helm delete ethadapter

```

## Potential issues

1. `Error: admission webhook "vingress.elbv2.k8s.aws" denied the request: invalid ingress class: IngressClass.networking.k8s.io "alb" not found`

    **Description:** This error only applies to Kubernetes >= 1.18 and indicates that no matching *IngressClass* object was found.

    **Solution:** Either declare an appropriate IngressClass or omit *className* and add annotation `kubernetes.io/ingress.class`

    Further information:

     - [Kubernetes IngressClass](https://kubernetes.io/docs/concepts/services-networking/ingress/#ingress-class)
     - [AWS Load Balancer controller documentation](https://kubernetes-sigs.github.io/aws-load-balancer-controller/v2.3/guide/ingress/ingress_class/)

## Helm Unittesting

[helm-unittest](https://github.com/quintush/helm-unittest) is being used for testing the output of the helm chart.
Tests can be found in [tests](./tests)

{{ template "chart.maintainersSection" . }}

{{ template "chart.requirementsSection" . }}

{{ template "chart.valuesHeader" . }}

*Note:* Please scroll horizontally to show more columns (e.g. description)!

{{ template "chart.valuesTable" . }}

{{ template "helm-docs.versionFooter" . }}
